# -*- coding: utf-8 -*-
"""Untitled41.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15yLpHJ_RdF8V-nEeHD7HiD2oWnzROWew
"""

import streamlit as st
import pandas as pd
import numpy as np
import requests
from datetime import date, timedelta
from tensorflow.keras.models import load_model
import xgboost as xgb
import joblib
import io
import tempfile

# Define raw GitHub URLs for the models and scalers
xgb_model_url = 'https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/xgb_model.json'
xgb_scaler_url = 'https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/scaler.pkl'

lstm_model_url = 'https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/lstm_model.keras'
lstm_scaler_url = 'https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/lstm_scaler.pkl'

svm_model_url = 'https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/svm_model.joblib'
svm_scaler_url = 'https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/scaler.joblib'
encoder_url = 'https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/encoder.joblib'

# Function to download and load models from GitHub
def download_and_load_model(url, model_type):
    response = requests.get(url)
    if response.status_code == 200:
        if model_type == 'joblib' or model_type == 'pickle':
            return joblib.load(io.BytesIO(response.content))
        elif model_type == 'keras':
            # Save the content to a temporary file and load it
            with tempfile.NamedTemporaryFile(delete=True, suffix='.keras') as tmp:
                tmp.write(response.content)
                tmp.flush()  # Ensure all data is written
                return load_model(tmp.name)
        elif model_type == 'xgboost':
            # Save the content to a temporary file and load it
            with tempfile.NamedTemporaryFile(delete=True, suffix='.json') as tmp:
                tmp.write(response.content)
                tmp.flush()  # Ensure all data is written
                model = xgb.XGBRegressor()  # Use XGBRegressor or XGBClassifier
                model.load_model(tmp.name)  # Use the file path
                return model
    else:
        print(f"Failed to download {url}")
        return None

# Loading models and scalers
xgb_model = download_and_load_model(xgb_model_url, 'xgboost')
xgb_scaler = download_and_load_model(xgb_scaler_url, 'pickle')

lstm_model = download_and_load_model(lstm_model_url, 'keras')
lstm_scaler = download_and_load_model(lstm_scaler_url, 'pickle')

svm_model = download_and_load_model(svm_model_url, 'joblib')
svm_scaler = download_and_load_model(svm_scaler_url, 'joblib')
encoder = download_and_load_model(encoder_url, 'joblib')

# Streamlit UI setup
st.title("Empowering Informed Investment Decisions Through Epiqo")

# Input fields
today = date.today()
min_date = today + timedelta(days=1)
max_date = today + timedelta(days=365)

selected_date = st.date_input("Select Date", min_value=min_date, max_value=max_date, help="Select a date for prediction")
if selected_date.weekday() > 4:  # 5 and 6 are Saturday and Sunday
    st.error("Select trading days only")

period = "long term" if (selected_date - today).days > 90 else "short term"
st.write(f"You selected {period}, for the date: {selected_date.strftime('%Y-%m-%d')}")

# Apply button
if st.button("Apply") and all([xgb_model, xgb_scaler, lstm_model, lstm_scaler, svm_model, svm_scaler, encoder]):
    # Preprocess input for model
    input_date = np.array([[selected_date.toordinal()]])
    scaled_date = xgb_scaler.transform(input_date) if period == "short term" else lstm_scaler.transform(input_date)

    # Prediction
    if period == "short term":
        prediction = xgb_model.predict(scaled_date)
        trend_prediction = encoder.inverse_transform(svm_model.predict(svm_scaler.transform(input_date)))
    else:
        prediction = lstm_model.predict(scaled_date.reshape(1, -1, 1))  # reshape as required by LSTM
        trend_prediction = encoder.inverse_transform(svm_model.predict(svm_scaler.transform(input_date)))

    st.write(f"Forecasted price for {selected_date.strftime('%Y-%m-%d')}: â‚¹{prediction[0]:.2f}")
    st.write(f"Market trend: {trend_prediction[0]}")

# Additional company information
st.markdown("""
Tata Motors Limited (TATAMOTORS.NS) offers its products to fleet owners, transporters, government agencies, defense,
public transport utilities, SMEs, agriculture and rural segment, mining and construction industry, etc.
The company was incorporated in 1945 and is headquartered in Mumbai, India.
""")