# -*- coding: utf-8 -*-
"""Untitled38.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fs3OqNBIYDR3AWw9jL7p8z0PuSexsIpI
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
from datetime import date, timedelta
from keras.models import load_model
import os

# Define local paths for models and scalers using raw strings
xgb_model_path = r'D:\1 ISB\Term 5\FP 2\New model\Model files\xgb_model.json'
xgb_scaler_path = r'D:\1 ISB\Term 5\FP 2\New model\Model files\scaler.pkl'

lstm_model_path = r'D:\1 ISB\Term 5\FP 2\New model\Model files\lstm_model.keras'
lstm_scaler_path = r'D:\1 ISB\Term 5\FP 2\New model\Model files\lstm_scaler.pkl'

svm_model_path = r'D:\1 ISB\Term 5\FP 2\New model\Model files\svm_model.joblib'
svm_scaler_path = r'D:\1 ISB\Term 5\FP 2\New model\Model files\scaler.joblib'
encoder_path = r'D:\1 ISB\Term 5\FP 2\New model\Model files\encoder.joblib'

# Function to load the models safely
def load_model_safely(file_path, model_type='joblib'):
    if os.path.exists(file_path):
        if model_type == 'joblib':
            return joblib.load(file_path)
        elif model_type == 'keras':
            return load_model(file_path)
    else:
        st.error(f"File not found: {file_path}")
        return None

# Load models and scalers
xgb_model = load_model_safely(xgb_model_path, 'joblib')
xgb_scaler = load_model_safely(xgb_scaler_path, 'joblib')

lstm_model = load_model_safely(lstm_model_path, 'keras')
lstm_scaler = load_model_safely(lstm_scaler_path, 'joblib')

svm_model = load_model_safely(svm_model_path, 'joblib')
svm_scaler = load_model_safely(svm_scaler_path, 'joblib')
encoder = load_model_safely(encoder_path, 'joblib')

# Streamlit UI setup
st.title("Empowering Informed Investment Decisions Through Epiqo")

# Input fields
today = date.today()
min_date = today + timedelta(days=1)
max_date = today + timedelta(days=365)

selected_date = st.date_input("Select Date", min_value=min_date, max_value=max_date, help="Select a date for prediction")
if selected_date.weekday() > 4:  # 5 and 6 are Saturday and Sunday
    st.error("Select trading days only")

period = "long term" if (selected_date - today).days > 90 else "short term"
st.write(f"You selected {period}, for the date: {selected_date.strftime('%Y-%m-%d')}")

# Apply button
if st.button("Apply") and all([xgb_model, xgb_scaler, lstm_model, lstm_scaler, svm_model, svm_scaler, encoder]):
    # Preprocess input for model
    input_date = np.array([[selected_date.toordinal()]])
    scaled_date = xgb_scaler.transform(input_date) if period == "short term" else lstm_scaler.transform(input_date)

    # Prediction
    if period == "short term":
        prediction = xgb_model.predict(scaled_date)
        trend_prediction = encoder.inverse_transform(svm_model.predict(svm_scaler.transform(input_date)))
    else:
        prediction = lstm_model.predict(scaled_date.reshape(1, -1, 1))  # reshape as required by LSTM
        trend_prediction = encoder.inverse_transform(svm_model.predict(svm_scaler.transform(input_date)))

    st.write(f"Forecasted price for {selected_date.strftime('%Y-%m-%d')}: â‚¹{prediction[0]:.2f}")

    # Display trend prediction
    trend = trend_prediction[0]
    st.write(f"Market trend: {trend}")

# Additional company information
st.markdown("""
Tata Motors Limited (TATAMOTORS.NS) offers its products to fleet owners, transporters, government agencies, defense,
public transport utilities, SMEs, agriculture and rural segment, mining and construction industry, etc.
The company was incorporated in 1945 and is headquartered in Mumbai, India.
""")