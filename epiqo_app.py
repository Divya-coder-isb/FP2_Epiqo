# -*- coding: utf-8 -*-
"""Untitled48.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wn5SbuT9SM8HYypECjxcO-W0AZtPsd9n
"""

import streamlit as st
import pandas as pd
from datetime import datetime
import joblib
import xgboost as xgb
import tensorflow as tf
import numpy as np

# Load models and scalers
def load_models():
    try:
        xgb_model = xgb.XGBRegressor()
        xgb_model.load_model('xgb_model.json')
        xgb_scaler = joblib.load('scaler.pkl')
    except Exception as e:
        st.error(f"Error loading XGBoost model or scaler: {e}")
        return None, None, None, None, None, None, None

    try:
        lstm_model = tf.keras.models.load_model('lstm_model.keras')
        lstm_scaler = joblib.load('lstm_scaler.pkl')
    except Exception as e:
        st.error(f"Error loading LSTM model or scaler: {e}")
        return None, None, None, None, None, None, None

    try:
        svm_model = joblib.load('svm_model.joblib')
        svm_scaler = joblib.load('scaler.joblib')
        svm_encoder = joblib.load('encoder.joblib')
    except Exception as e:
        st.error(f"Error loading SVM model, scaler, or encoder: {e}")
        return None, None, None, None, None, None, None

    return xgb_model, xgb_scaler, lstm_model, lstm_scaler, svm_model, svm_scaler, svm_encoder

xgb_model, xgb_scaler, lstm_model, lstm_scaler, svm_model, svm_scaler, svm_encoder = load_models()

if xgb_model is None or lstm_model is None or svm_model is None:
    st.error("Failed to load one or more models. Please check the logs for more details.")
else:
    # Streamlit app layout
    banner_url = 'https://github.com/Divya-coder-isb/FP2_Epiqo/blob/main/Screenshot%202024-07-03%20135327.png?raw=true'
    st.image(banner_url, width=700)
    st.title('Empowering Informed Investment Decisions Through Epiqo')

    st.subheader('Tata Motors Limited (TATAMOTORS.NS)')
    st.write("It offers its products to fleet owners, transporters, government agencies, defense, public transport utilities, SMEs, agriculture and rural segment, mining and construction industry, etc. The company was incorporated in 1945 and is headquartered in Mumbai, India.")

    # Date input
    today = datetime.now().date()  # Get the current date without the time component
    min_date = today + pd.DateOffset(days=1)
    date = st.date_input('Select forecast date:', min_value=min_date)

    # Determine the forecast type
    forecast_type = 'Long term' if (date - today).days > 90 else 'Short term'
    st.write(f"Forecast Type: {forecast_type}")

    # Prediction button
    if st.button('Apply'):
        # Assume appropriate feature transformation before feeding to models
        input_date = pd.to_datetime([date])
        features = xgb_scaler.transform([[input_date.month, input_date.day]])  # Example feature engineering

        try:
            if forecast_type == 'Short term':
                prediction = xgb_model.predict(features)
            else:
                scaled_data = lstm_scaler.transform(np.array([input_date.toordinal()]).reshape(-1, 1))
                prediction = lstm_model.predict(scaled_data.reshape(1, -1, 1))

            trend_prediction = svm_model.predict(svm_scaler.transform(features))
            trend = svm_encoder.inverse_transform(trend_prediction)[0]

            st.write(f"Predicted Price: â‚¹{prediction[0]:.2f}")
            st.write(f"Market Trend: {trend}")

            image_url = 'Bearish.png' if trend == 'bearish' else 'Bullish.png' if trend == 'bullish' else None
            if image_url:
                st.image(image_url)
        except Exception as e:
            st.error(f"Error during prediction: {e}")