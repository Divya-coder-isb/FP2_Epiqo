# -*- coding: utf-8 -*-
"""Epiqo_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1drb3FhSc4Ig6U7pItNHyIqUHhn8mGsBo
"""

import streamlit as st
from datetime import datetime, timedelta
import numpy as np
import pandas as pd
import joblib
import tensorflow as tf
import xgboost as xgb
from PIL import Image
import requests
import os

# Define URLs for the models
XGB_MODEL_URL = 'https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/xgb_model.json'
XGB_SCALER_URL = 'https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/scaler.pkl'
LSTM_MODEL_URL = 'https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/lstm_model.keras'
LSTM_SCALER_URL = 'https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/lstm_scaler.pkl'
SVM_MODEL_URL = 'https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/svm_model.joblib'
SVM_SCALER_URL = 'https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/scaler.joblib'
SVM_ENCODER_URL = 'https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/encoder.joblib'

# Download files from GitHub
def download_file(url, dest_path):
    if not os.path.exists(dest_path):
        r = requests.get(url)
        with open(dest_path, 'wb') as f:
            f.write(r.content)

# Download the models and scalers
download_file(XGB_MODEL_URL, 'xgb_model.json')
download_file(XGB_SCALER_URL, 'scaler.pkl')
download_file(LSTM_MODEL_URL, 'lstm_model.keras')
download_file(LSTM_SCALER_URL, 'lstm_scaler.pkl')
download_file(SVM_MODEL_URL, 'svm_model.joblib')
download_file(SVM_SCALER_URL, 'scaler.joblib')
download_file(SVM_ENCODER_URL, 'encoder.joblib')

# Load models and scalers
xgb_model = xgb.XGBRegressor()
xgb_model.load_model('xgb_model.json')
xgb_scaler = joblib.load('scaler.pkl')

lstm_model = tf.keras.models.load_model('lstm_model.keras')
lstm_scaler = joblib.load('lstm_scaler.pkl')

svm_model = joblib.load('svm_model.joblib')
svm_scaler = joblib.load('scaler.joblib')
svm_encoder = joblib.load('encoder.joblib')

# Helper functions
def forecast_xgboost(days_ahead):
    features = np.array([[days_ahead, days_ahead / 2]])  # Example features
    scaled_features = xgb_scaler.transform(features)
    prediction = xgb_model.predict(scaled_features)
    return prediction[0]

def forecast_lstm(days_ahead):
    new_data = np.array([days_ahead])  # Example feature
    new_data_scaled = lstm_scaler.transform(new_data.reshape(-1, 1))
    new_data_reshaped = new_data_scaled.reshape(1, len(new_data), 1)
    prediction = lstm_model.predict(new_data_reshaped)
    prediction = lstm_scaler.inverse_transform(prediction)
    return prediction[0][0]

def predict_trend(days_ahead):
    new_data = np.array([[days_ahead]])  # Example feature
    new_data_scaled = svm_scaler.transform(new_data)
    prediction = svm_model.predict(new_data_scaled)
    trend = svm_encoder.inverse_transform(prediction)
    return trend[0]

def is_weekday(date):
    return date.weekday() < 5

# Streamlit UI
st.set_page_config(page_title="Epiqo - Stock Forecast", layout="wide")

# Load assets
banner = Image.open(requests.get('https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/Screenshot%202024-07-03%20135327.png', stream=True).raw)
bearish_img = Image.open(requests.get('https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/Bearish.png', stream=True).raw)
bullish_img = Image.open(requests.get('https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/Bullish.png', stream=True).raw)

# Display banner
st.image(banner, use_column_width=True)

# Company information
st.markdown("""
    ### Tata Motors Limited (TATAMOTORS.NS)
    It offers its products to fleet owners, transporters, government agencies, defense, public transport utilities,
    small and medium enterprises (SMEs), agriculture and rural segment, mining and construction industry, etc.
    The company was incorporated in 1945 and is headquartered in Mumbai, India.
""")

# Input fields
st.sidebar.header("Select Forecasting Period")
short_term_date = st.sidebar.date_input("Short term", value=datetime.today(), min_value=datetime.today())
long_term_date = st.sidebar.date_input("Long term", value=datetime.today() + timedelta(days=90), min_value=datetime.today())

# Check if dates are valid
if not is_weekday(short_term_date):
    st.sidebar.error("Select the trading days only for short term.")
if not is_weekday(long_term_date):
    st.sidebar.error("Select the trading days only for long term.")

# Apply button
if st.sidebar.button("Apply"):
    today = datetime.today()
    short_term = short_term_date <= today + timedelta(days=90)
    forecast_date = short_term_date if short_term else long_term_date
    days_ahead = (forecast_date - today).days

    if short_term:
        forecast_price = forecast_xgboost(days_ahead)
        st.metric("Short term Adj closing price", f"{forecast_price:.2f} INR")
    else:
        forecast_price = forecast_lstm(days_ahead)
        st.metric("Long term Adj closing price", f"{forecast_price:.2f} INR")

    trend = predict_trend(days_ahead)
    if trend == "bullish":
        st.image(bullish_img, width=100)
    elif trend == "bearish":
        st.image(bearish_img, width=100)
    else:
        st.write("Market trend: Neutral")

# Requirements file
requirements = """
streamlit
pandas
numpy
scikit-learn
xgboost
tensorflow
Pillow
joblib
requests
"""
st.sidebar.text_area("requirements.txt", requirements)