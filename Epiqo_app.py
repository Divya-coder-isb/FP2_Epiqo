# -*- coding: utf-8 -*-
"""Untitled52.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OiRZzlqYbTpY2cSUa4NGriWN_N-bfaJp
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import xgboost as xgb
from tensorflow.keras.models import load_model
from datetime import datetime, timedelta
from PIL import Image
import requests
import os

# Helper function to download files from GitHub
def download_file(url, filename):
    response = requests.get(url)
    with open(filename, 'wb') as f:
        f.write(response.content)

# Download models and scaler from GitHub if they don't exist
if not os.path.exists("xgboost_full_model.json"):
    download_file("https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/xgboost_full_model.json", "xgboost_full_model.json")
if not os.path.exists("lstm_full_model.h5"):
    download_file("https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/lstm_full_model.h5", "lstm_full_model.h5")
if not os.path.exists("svm_full_model.pkl"):
    download_file("https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/svm_full_model.pkl", "svm_full_model.pkl")
if not os.path.exists("scaler.pkl"):
    download_file("https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/scaler.pkl", "scaler.pkl")

# Load models and scaler
xgb_model = xgb.Booster()
xgb_model.load_model("xgboost_full_model.json")
lstm_model = load_model("lstm_full_model.h5")
svm_model = joblib.load("svm_full_model.pkl")
scaler = joblib.load("scaler.pkl")

# Download images from GitHub if they don't exist
if not os.path.exists("banner_image.png"):
    download_file("https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/Screenshot%202024-07-03%20135327.png", "banner_image.png")
if not os.path.exists("bearish.png"):
    download_file("https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/Bearish.png", "bearish.png")
if not os.path.exists("bullish.png"):
    download_file("https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/Bullish.png", "bullish.png")

# Load images
banner_image = Image.open("banner_image.png")
bearish_image = Image.open("bearish.png")
bullish_image = Image.open("bullish.png")

# Helper functions
def create_lagged_features(data, num_lags=10):
    for i in range(1, num_lags + 1):
        data[f'lag_{i}'] = data['Close'].shift(i)
    data.dropna(inplace=True)
    return data

def create_sequences(data, n_steps):
    X = []
    for i in range(n_steps, len(data)):
        X.append(data[i-n_steps:i])
    return np.array(X)

def prepare_data_for_prediction(date, num_lags=10):
    # Load data
    url = "https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/tatamotors_historical_data.csv"
    data = pd.read_csv(url)
    data['Date'] = pd.to_datetime(data['Date'])
    data.set_index('Date', inplace=True)

    # Create lagged features
    data = create_lagged_features(data)

    # Select the latest available data for prediction
    features = data.drop('Close', axis=1).iloc[-1].values.reshape(1, -1)
    return features

# Define functions to predict using the XGBoost and LSTM models
def predict_xgb(selected_date):
    features = prepare_data_for_prediction(selected_date)
    dmatrix = xgb.DMatrix(features)

    # Predict using the XGBoost model
    pred = xgb_model.predict(dmatrix)
    return pred[0]

def predict_lstm(selected_date):
    # Load data
    url = "https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/tatamotors_historical_data.csv"
    data = pd.read_csv(url)
    data['Date'] = pd.to_datetime(data['Date'])
    data.set_index('Date', inplace=True)

    # Normalize the entire dataset
    scaled_data = scaler.transform(data[['Close']])

    # Create sequences
    X_full = create_sequences(scaled_data, 60)

    # Predict using the LSTM model
    pred_scaled = lstm_model.predict(X_full[-1].reshape(1, 60, 1))
    pred = scaler.inverse_transform(pred_scaled)
    return pred[0][0]

def classify_trend(rsi):
    if rsi > 70:
        return 'Bullish', bullish_image
    elif rsi < 30:
        return 'Bearish', bearish_image
    else:
        return 'Neutral', None

def predict_trend(date):
    # Implement SVM trend prediction logic
    rsi = 50  # Dummy RSI value for example
    return classify_trend(rsi)

def validate_date(selected_date):
    if selected_date.weekday() >= 5:
        st.error("Select the trading days only")
        return False
    return True

# Streamlit UI
st.image(banner_image, use_column_width=True)
st.write("## Tata Motors Limited (TATAMOTORS.NS)")
st.write("It offers its products to fleet owners, transporters, government agencies, defense, public transport utilities, small and medium enterprises (SMEs), agriculture and rural segment, mining and construction industry, etc. The company was incorporated in 1945 and is headquartered in Mumbai, India.")

min_date = datetime.today() + timedelta(days=1)
max_date = min_date + timedelta(days=3650)  # 10 years from today

selected_date = st.date_input("Select a date", min_value=min_date, max_value=max_date, value=min_date)
forecast_type = st.radio("Forecast Type", ('Short term', 'Long term'))

if st.button("Apply"):
    if validate_date(selected_date):
        if forecast_type == 'Short term':
            price = predict_xgb(selected_date)
            st.write(f"Short term Adj closing price: {price} INR")
        else:
            price = predict_lstm(selected_date)
            st.write(f"Long term Adj closing price: {price} INR")

        trend, trend_image = predict_trend(selected_date)
        st.write(f"Market Trend: {trend}")
        if trend_image:
            st.image(trend_image, width=100)

# Display date in the box
st.write(f"Selected Date: {selected_date}")

