# -*- coding: utf-8 -*-
"""Untitled64.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oAod8AG8GBN-PyXr1DBMsErg3LKL_CFv
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import requests
from datetime import datetime, timedelta
from tensorflow.keras.models import load_model
import os

# Function to download files from GitHub
def download_file(url, dest):
    if not os.path.exists(dest):
        response = requests.get(url)
        with open(dest, 'wb') as file:
            file.write(response.content)

# Download and load all necessary resources
xgb_model = joblib.load('xgboost_model.pkl')
lstm_model = load_model('lstm_model.h5')
lstm_scaler = joblib.load('lstm_scaler.pkl')
svm_model = joblib.load('svm_model.pkl')
svm_scaler = joblib.load('svm_scaler.pkl')

df = pd.read_csv('tatamotors_historical_data.csv')
df['Date'] = pd.to_datetime(df['Date'], format='%Y-%m-%d %H:%M:%S%z', utc=True)
df.set_index('Date', inplace=True)

# Create features for the model
def create_features(df):
    df['lag_1'] = df['Close'].shift(1)
    df['lag_2'] = df['Close'].shift(2)
    df['lag_3'] = df['Close'].shift(3)
    df['rolling_mean_3'] = df['Close'].rolling(window=3).mean()
    df['rolling_std_3'] = df['Close'].rolling(window=3).std()
    df['rolling_mean_7'] = df['Close'].rolling(window=7).mean()
    df['rolling_std_7'] = df['Close'].rolling(window=7).std()
    return df.dropna()

df = create_features(df)

# Create features for a single date
def create_date_features(date, df):
    last_row = df.iloc[-1].copy()
    last_row.name = date
    return last_row.to_frame().transpose()

# Classify the trend
def classify_trend(date):
    features = create_date_features(date, df)
    rsi = calculate_rsi(features['Close'])
    rsi_scaled = svm_scaler.transform([[rsi]])
    return svm_model.predict(rsi_scaled)[0]

# Calculate RSI
def calculate_rsi(series, window=14):
    delta = series.diff()
    gain = (delta.where(delta > 0, 0)).fillna(0)
    loss = (-delta.where(delta < 0, 0)).fillna(0)
    avg_gain = gain.rolling(window=window, min_periods=1).mean()
    avg_loss = loss.rolling(window=window, min_periods=1).mean()
    rs = avg_gain / avg_loss
    rsi = 100.0 - (100.0 / (1.0 + rs))
    return rsi

# Forecast function for the LSTM model
def forecast(date, today):
    if (date - today).days < 90:
        features = create_date_features(date, df)
        prediction = xgb_model.predict(features)[0]
    else:
        # Additional logic for LSTM prediction goes here
        prediction = None  # Placeholder for LSTM forecasting logic
    return prediction

# UI setup
st.image('https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/Screenshot%202024-07-03%20135327.png')
st.write("""
# Tata Motors Limited (TATAMOTORS.NS)
It offers its products to fleet owners, transporters, government agencies, defense, public transport utilities, small and medium enterprises (SMEs), agriculture and rural segment, mining and construction industry, etc. The company was incorporated in 1945 and is headquartered in Mumbai, India.
""")

selected_date = st.date_input("Select a date", min_value=datetime.now().date(), max_value=datetime.now().date() + timedelta(days=365))
user_date = pd.to_datetime(selected_date).tz_localize('UTC')

if user_date.weekday() >= 5:
    st.error("Select trading days only")
else:
    today = pd.to_datetime('today').tz_localize('UTC')
    if st.button('Apply'):
        trend = classify_trend(user_date)
        forecast_price = forecast(user_date, today)
        st.write(f"### Forecast Price: {forecast_price}")
        if trend == 'bearish':
            st.image('https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/Bearish.png', caption='Bearish Trend')
        elif trend == 'bullish':
            st.image('https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/Bullish.png', caption='Bullish Trend')
        else:
            st.write("### Neutral")