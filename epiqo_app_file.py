# -*- coding: utf-8 -*-
"""Untitled23.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xFJl9boHpWdacecvB4QaYvUKzPHrObC_
"""

import streamlit as st
import pandas as pd
import numpy as np
import datetime as dt
import requests
import joblib
from io import BytesIO
from keras.models import load_model

# Load models from GitHub
@st.cache_resource
def load_arima_model():
    url = "https://github.com/Divya-coder-isb/FP2_Epiqo/blob/main/arima_model.pkl?raw=true"
    response = requests.get(url)
    arima_model = joblib.load(BytesIO(response.content))
    return arima_model

@st.cache_resource
def load_svm_model():
    url = "https://github.com/Divya-coder-isb/FP2_Epiqo/blob/main/svm_model.joblib?raw=true"
    response = requests.get(url)
    svm_model = joblib.load(BytesIO(response.content))
    return svm_model

@st.cache_resource
def load_lstm_model():
    url = "https://github.com/Divya-coder-isb/FP2_Epiqo/blob/main/lstm_model.h5?raw=true"
    with requests.get(url, stream=True) as response:
        response.raise_for_status()
        with open("/tmp/lstm_model.h5", 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
    lstm_model = load_model("/tmp/lstm_model.h5")
    return lstm_model

# Load models
arima_model = load_arima_model()
svm_model = load_svm_model()
lstm_model = load_lstm_model()

# UI Configuration
st.set_page_config(page_title="Stock Price Prediction", layout="centered")

# Load images
header_image = "https://github.com/Divya-coder-isb/FP2_Epiqo/blob/main/Screenshot%202024-07-03%20135327.png"
bearish_image = "https://github.com/Divya-coder-isb/FP2_Epiqo/blob/main/Bearish.png"
bullish_image = "https://github.com/Divya-coder-isb/FP2_Epiqo/blob/main/Bullish.png"

# Title and Description
st.image(header_image)
st.write("### Tata Motors Limited (TATAMOTORS.NS)")
st.write("It offers its products to fleet owners, transporters, government agencies, defense, public transport utilities, small and medium enterprises (SMEs), agriculture and rural segment, mining and construction industry, etc. The company was incorporated in 1945 and is headquartered in Mumbai, India.")

# Date Selection
today = dt.date.today()
short_term_max = today + dt.timedelta(days=90)
long_term_min = today + dt.timedelta(days=91)

st.write("#### Select Prediction Period")
short_term_date = st.date_input("Short term (within 3 months)", min_value=today, max_value=short_term_max)
long_term_date = st.date_input("Long term (beyond 3 months)", min_value=long_term_min)

# Check if the date is a trading day
if short_term_date.weekday() >= 5 or long_term_date.weekday() >= 5:
    st.error("Select trading days only.")

# Model Prediction on Apply
if st.button('Apply'):
    if short_term_date < long_term_min:
        selected_date = short_term_date
        st.write(f"Selected Short Term Date: {selected_date}")
        short_term_prediction = arima_model.predict(start=len(arima_model.data), end=len(arima_model.data))[0]
        st.write(f"Short Term Adjusted Closing Price: {short_term_prediction} INR")
    else:
        selected_date = long_term_date
        st.write(f"Selected Long Term Date: {selected_date}")
        long_term_prediction = lstm_model.predict(np.array([selected_date.toordinal()]).reshape(-1, 1))
        st.write(f"Long Term Adjusted Closing Price: {long_term_prediction[0][0]} INR")

    trend_prediction = svm_model.predict([[selected_date.toordinal()]])
    if trend_prediction == 0:
        st.image(bearish_image, caption='Bearish Trend')
    else:
        st.image(bullish_image, caption='Bullish Trend')

# Reset Button
if st.button('Reset'):
    st.experimental_rerun()