# -*- coding: utf-8 -*-
"""Epiqo_App file

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tWzeZW5eAnAlY9S0MUHcvSU3LvD0fofT
"""

import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from PIL import Image
import pickle
from tensorflow.keras.models import load_model
import matplotlib.pyplot as plt
import requests
from io import BytesIO
import tempfile

# Function to download files
def download_file(url):
    response = requests.get(url)
    response.raise_for_status()
    return BytesIO(response.content)

# Load models
arima_model = pickle.load(download_file('https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/arima_model.pkl'))
svm_model = pickle.load(download_file('https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/svm_model.pkl'))

# Download and save the LSTM model temporarily
lstm_model_url = 'https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/lstm_model.h5'
lstm_model_data = download_file(lstm_model_url)

with tempfile.NamedTemporaryFile(delete=False, suffix='.h5') as tmp:
    tmp.write(lstm_model_data.read())
    tmp.flush()
    lstm_model_path = tmp.name

lstm_model = load_model(lstm_model_path)

# Load images
header_image = Image.open(download_file('https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/Screenshot%202024-07-03%20135327.png'))
bullish_image = Image.open(download_file('https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/Bullish.png'))
bearish_image = Image.open(download_file('https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/Bearish.png'))

# Helper functions
def is_trading_day(date):
    return date.weekday() < 5

def get_trading_day(date):
    while not is_trading_day(date):
        date += timedelta(days=1)
    return date

def format_date(date):
    return date.strftime('%Y-%m-%d 00:00:00+05:30')

def predict_price(model, date, term):
    # Replace this with actual model prediction logic
    if term == 'short':
        return np.random.randint(3800, 4200), np.random.randn(100)
    else:
        return np.random.randint(3800, 4200), np.random.randn(100)

def predict_trend(model, date):
    # Replace this with actual model prediction logic
    return np.random.choice([0, 1])

# UI layout
st.image(header_image)
st.title('Empowering Informed Investment Decisions Through Epiqo')

# Company details
st.write('''### Tata Motors Limited (TATAMOTORS.NS)
It offers its products to fleet owners, transporters, government agencies, defense, public transport utilities, small and medium enterprises (SMEs), agriculture and rural segment, mining and construction industry, etc. The company was incorporated in 1945 and is headquartered in Mumbai, India.''')

# Input fields
short_term_date = st.date_input("Short term", key='short_term')
long_term_date = st.date_input("Long term", key='long_term')

# Error handling for weekends
if short_term_date and not is_trading_day(short_term_date):
    st.error("Select the trading days only")
    short_term_date = None

if long_term_date and not is_trading_day(long_term_date):
    st.error("Select the trading days only")
    long_term_date = None

# Apply and Reset buttons
apply = st.button('Apply')
reset = st.button('Reset')

if apply:
    if short_term_date:
        short_term_date = get_trading_day(short_term_date)
        short_term_formatted_date = format_date(short_term_date)
        short_term_price, short_term_predictions = predict_price(arima_model, short_term_formatted_date, 'short')
        st.write(f"Short term Adj closing price: {short_term_price} INR")

        # Plot graph
        fig, ax = plt.subplots()
        ax.plot(short_term_predictions)
        ax.set_title('Short Term Price Prediction')
        st.pyplot(fig)

    if long_term_date:
        long_term_date = get_trading_day(long_term_date)
        long_term_formatted_date = format_date(long_term_date)
        long_term_price, long_term_predictions = predict_price(lstm_model, long_term_formatted_date, 'long')
        st.write(f"Long term Adj closing price: {long_term_price} INR")

        # Plot graph
        fig, ax = plt.subplots()
        ax.plot(long_term_predictions)
        ax.set_title('Long Term Price Prediction')
        st.pyplot(fig)

    selected_date = short_term_date if short_term_date else long_term_date
    trend = predict_trend(svm_model, selected_date)

    if trend == 1:
        st.image(bullish_image, caption='Bullish')
    else:
        st.image(bearish_image, caption='Bearish')

if reset:
    short_term_date = None
    long_term_date = None
    st.write("Date selections have been reset.")