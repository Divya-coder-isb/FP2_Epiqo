# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q8Busyhs_pAlsmH2TTJkKfPvzsx3241R
"""

import streamlit as st
from datetime import datetime, timedelta
import pandas as pd
import numpy as np
import pickle
import requests
from PIL import Image

# Function to download file from URL
def download_file(url, filename):
    response = requests.get(url)
    with open(filename, 'wb') as f:
        f.write(response.content)

# Function to load models
@st.cache_data()
def load_models():
    # Download models from GitHub
    download_file('https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/arima_model.pkl', 'arima_model.pkl')
    download_file('https://github.com/Divya-coder-isb/FP2_Epiqo/raw/main/svm_model.pkl', 'svm_model.pkl')

    # Load models
    arima_model = pickle.load(open('arima_model.pkl', 'rb'))
    svm_model = pickle.load(open('svm_model.pkl', 'rb'))
    lstm_model = load_lstm_model()  # Loading LSTM model separately due to its nature
    return arima_model, svm_model, lstm_model

# Function to load LSTM model (mock implementation)
@st.cache_data()
def load_lstm_model():
    # Mock implementation; replace with actual implementation
    return None

# Function to fetch historical prices (mocked data)
def fetch_historical_prices(symbol, start_date, end_date):
    # Mock implementation; replace with actual API or database query
    dates = pd.date_range(start=start_date, end=end_date, freq='B')  # Business days
    prices = np.random.randint(50, 150, size=len(dates))  # Random prices
    return pd.DataFrame({'Date': dates, 'Close': prices})

# Function to check if a date is a weekend (Saturday or Sunday)
def is_weekend(date):
    return date.weekday() >= 5  # Saturday = 5, Sunday = 6

# Load models
arima_model, svm_model, lstm_model = load_models()

# Streamlit UI
st.title("")
st.image("https://github.com/Divya-coder-isb/FP2_Epiqo/blob/main/Screenshot%202024-07-03%20135327.png")
st.markdown("---")
st.write("Tata Motors Limited (TATAMOTORS.NS)")
st.write("It offers its products to fleet owners, transporters, government agencies, defense, public transport utilities, small and medium enterprises (SMEs), agriculture and rural segment, mining and construction industry, etc. The company was incorporated in 1945 and is headquartered in Mumbai, India.")
st.markdown("---")

# Sidebar with date selection
st.sidebar.header("Select Date")
selected_date = st.sidebar.date_input("Period", datetime.today())

# Validate selected date
if is_weekend(selected_date):
    st.sidebar.error("Select the trading days only")
else:
    st.sidebar.write(f"Selected date: {selected_date.strftime('%Y-%m-%d')}")

    # Apply and Reset buttons
    col1, col2 = st.columns(2)
    if col1.button("Apply"):
        today_plus_90_days = datetime.today() + timedelta(days=90)
        if selected_date >= today_plus_90_days:  # Long term (greater than or equal to 3 months)
            st.subheader("Long Term Price Forecast")
            end_date = selected_date + timedelta(days=365)  # Example: Forecast for one year ahead
            historical_data = fetch_historical_prices('TATAMOTORS.NS', selected_date, end_date)
            # Use LSTM model for long term forecasting if available
            if lstm_model:
                lstm_forecast = lstm_model.predict(historical_data['Close'].values.reshape(-1, 1))
                st.write("Long term forecast result:", lstm_forecast[-1])  # Example output
            else:
                st.write("LSTM model not available.")

        elif selected_date < today_plus_90_days:  # Short term (less than 3 months)
            st.subheader("Short Term Price Forecast")
            end_date = selected_date + timedelta(days=30)  # Example: Forecast for one month ahead
            historical_data = fetch_historical_prices('TATAMOTORS.NS', selected_date, end_date)
            # Use ARIMA model for short term forecasting
            arima_forecast = arima_model.predict(n_periods=1)  # Example output
            st.write("Short term forecast result:", arima_forecast[-1])

        # Market trend prediction using SVM
        st.subheader("Market Trend Prediction")
        # Mock prediction from SVM model (0 for Bearish, 1 for Bullish)
        svm_prediction = svm_model.predict(np.random.rand(1, 5))[0]
        if svm_prediction == 0:
            st.image("https://github.com/Divya-coder-isb/FP2_Epiqo/blob/main/Bearish.png", width=150)
            st.write("Market trend: Bearish")
        elif svm_prediction == 1:
            st.image("https://github.com/Divya-coder-isb/FP2_Epiqo/blob/main/Bullish.png", width=150)
            st.write("Market trend: Bullish")

    col2.button("Reset")

# Footer
st.markdown("---")
st.write("Powered by Streamlit")